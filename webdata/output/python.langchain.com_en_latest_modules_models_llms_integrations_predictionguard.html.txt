.ipynb
.pdf
Prediction Guard
Contents
Prediction Guard
Control the output structure/ type of LLMs
Chaining
Prediction Guard
#
Prediction Guard
gives a quick and easy access to state-of-the-art open and closed access LLMs, without  needing to spend days and weeks figuring out all of the implementation details, managing a bunch of different API specs, and setting up the infrastructure for model deployments.
!
pip
install
predictionguard
langchain
import
os
import
predictionguard
as
pg
from
langchain.llms
import
PredictionGuard
from
langchain
import
PromptTemplate
,
LLMChain
# Optional, add your OpenAI API Key. This is optional, as Prediction Guard allows
# you to access all the latest open access models (see https://docs.predictionguard.com)
os
.
environ
[
"OPENAI_API_KEY"
]
=
"<your OpenAI api key>"
# Your Prediction Guard API key. Get one at predictionguard.com
os
.
environ
[
"PREDICTIONGUARD_TOKEN"
]
=
"<your Prediction Guard access token>"
pgllm
=
PredictionGuard
(
model
=
"OpenAI-text-davinci-003"
)
pgllm
(
"Tell me a joke"
)
Control the output structure/ type of LLMs
#
template
=
"""Respond to the following query based on the context.
Context: EVERY comment, DM + email suggestion has led us to this EXCITING announcement! ðŸŽ‰ We have officially added TWO new candle subscription box options! ðŸ“¦
Exclusive Candle Box - $80
Monthly Candle Box - $45 (NEW!)
Scent of The Month Box - $28 (NEW!)
Head to stories to get ALLL the deets on each box! ðŸ‘† BONUS: Save 50
% o
n your first box with code 50OFF! ðŸŽ‰
Query:
{query}
Result: """
prompt
=
PromptTemplate
(
template
=
template
,
input_variables
=
[
"query"
])
# Without "guarding" or controlling the output of the LLM.
pgllm
(
prompt
.
format
(
query
=
"What kind of post is this?"
))
# With "guarding" or controlling the output of the LLM. See the
# Prediction Guard docs (https://docs.predictionguard.com) to learn how to
# control the output with integer, float, boolean, JSON, and other types and
# structures.
pgllm
=
PredictionGuard
(
model
=
"OpenAI-text-davinci-003"
,
output
=
{
"type"
:
"categorical"
,
"categories"
:
[
"product announcement"
,
"apology"
,
"relational"
]
})
pgllm
(
prompt
.
format
(
query
=
"What kind of post is this?"
))
Chaining
#
pgllm
=
PredictionGuard
(
model
=
"OpenAI-text-davinci-003"
)
template
=
"""Question:
{question}
Answer: Let's think step by step."""
prompt
=
PromptTemplate
(
template
=
template
,
input_variables
=
[
"question"
])
llm_chain
=
LLMChain
(
prompt
=
prompt
,
llm
=
pgllm
,
verbose
=
True
)
question
=
"What NFL team won the Super Bowl in the year Justin Beiber was born?"
llm_chain
.
predict
(
question
=
question
)
template
=
"""Write a
{adjective}
poem about
{subject}
."""
prompt
=
PromptTemplate
(
template
=
template
,
input_variables
=
[
"adjective"
,
"subject"
])
llm_chain
=
LLMChain
(
prompt
=
prompt
,
llm
=
pgllm
,
verbose
=
True
)
llm_chain
.
predict
(
adjective
=
"sad"
,
subject
=
"ducks"
)
previous
PipelineAI
next
PromptLayer OpenAI
Contents
Prediction Guard
Control the output structure/ type of LLMs
Chaining
By Harrison Chase
Â© Copyright 2023, Harrison Chase.
Last updated on Jun 09, 2023.
.ipynb
.pdf
Chat Prompt Templates
Contents
Format output
Different types of
MessagePromptTemplate
Chat Prompt Templates
#
Chat Models
take a list of
chat
messages
as
input - this list commonly referred to as a
prompt
.
These chat messages differ from raw string (which you would pass into a
LLM
model) in that every message is associated with a
role
.
For example, in OpenAI
Chat Completion API
, a chat message can be associated with the AI, human or system role. The model is supposed to follow instruction from system chat message more closely.
LangChain provides several prompt templates to make constructing and working with prompts easily. You are encouraged to use these chat related prompt templates instead of
PromptTemplate
when querying chat models to fully exploit the potential of underlying chat model.
from
langchain.prompts
import
(
ChatPromptTemplate
,
PromptTemplate
,
SystemMessagePromptTemplate
,
AIMessagePromptTemplate
,
HumanMessagePromptTemplate
,
)
from
langchain.schema
import
(
AIMessage
,
HumanMessage
,
SystemMessage
)
To create a message template associated with a role, you use
MessagePromptTemplate
.
For convenience, there is a
from_template
method exposed on the template. If you were to use this template, this is what it would look like:
template
=
"You are a helpful assistant that translates
{input_language}
to
{output_language}
."
system_message_prompt
=
SystemMessagePromptTemplate
.
from_template
(
template
)
human_template
=
"
{text}
"
human_message_prompt
=
HumanMessagePromptTemplate
.
from_template
(
human_template
)
If you wanted to construct the
MessagePromptTemplate
more directly, you could create a PromptTemplate outside and then pass it in, eg:
prompt
=
PromptTemplate
(
template
=
"You are a helpful assistant that translates
{input_language}
to
{output_language}
."
,
input_variables
=
[
"input_language"
,
"output_language"
],
)
system_message_prompt_2
=
SystemMessagePromptTemplate
(
prompt
=
prompt
)
assert
system_message_prompt
==
system_message_prompt_2
After that, you can build a
ChatPromptTemplate
from one or more
MessagePromptTemplates
. You can use
ChatPromptTemplate
’s
format_prompt
– this returns a
PromptValue
, which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model.
chat_prompt
=
ChatPromptTemplate
.
from_messages
([
system_message_prompt
,
human_message_prompt
])
# get a chat completion from the formatted messages
chat_prompt
.
format_prompt
(
input_language
=
"English"
,
output_language
=
"French"
,
text
=
"I love programming."
)
.
to_messages
()
[SystemMessage(content='You are a helpful assistant that translates English to French.', additional_kwargs={}),
 HumanMessage(content='I love programming.', additional_kwargs={})]
Format output
#
The output of the format method is available as string, list of messages and
ChatPromptValue
As string:
output
=
chat_prompt
.
format
(
input_language
=
"English"
,
output_language
=
"French"
,
text
=
"I love programming."
)
output
'System: You are a helpful assistant that translates English to French.\nHuman: I love programming.'
# or alternatively
output_2
=
chat_prompt
.
format_prompt
(
input_language
=
"English"
,
output_language
=
"French"
,
text
=
"I love programming."
)
.
to_string
()
assert
output
==
output_2
As
ChatPromptValue
chat_prompt
.
format_prompt
(
input_language
=
"English"
,
output_language
=
"French"
,
text
=
"I love programming."
)
ChatPromptValue(messages=[SystemMessage(content='You are a helpful assistant that translates English to French.', additional_kwargs={}), HumanMessage(content='I love programming.', additional_kwargs={})])
As list of Message objects
chat_prompt
.
format_prompt
(
input_language
=
"English"
,
output_language
=
"French"
,
text
=
"I love programming."
)
.
to_messages
()
[SystemMessage(content='You are a helpful assistant that translates English to French.', additional_kwargs={}),
 HumanMessage(content='I love programming.', additional_kwargs={})]
Different types of
MessagePromptTemplate
#
LangChain provides different types of
MessagePromptTemplate
. The most commonly used are
AIMessagePromptTemplate
,
SystemMessagePromptTemplate
and
HumanMessagePromptTemplate
, which create an AI message, system message and human message respectively.
However, in cases where the chat model supports taking chat message with arbitrary role, you can use
ChatMessagePromptTemplate
, which allows user to specify the role name.
from
langchain.prompts
import
ChatMessagePromptTemplate
prompt
=
"May the
{subject}
be with you"
chat_message_prompt
=
ChatMessagePromptTemplate
.
from_template
(
role
=
"Jedi"
,
template
=
prompt
)
chat_message_prompt
.
format
(
subject
=
"force"
)
ChatMessage(content='May the force be with you', additional_kwargs={}, role='Jedi')
LangChain also provides
MessagesPlaceholder
, which gives you full control of what messages to be rendered during formatting. This can be useful when you are uncertain of what role you should be using for your message prompt templates or when you wish to insert a list of messages during formatting.
from
langchain.prompts
import
MessagesPlaceholder
human_prompt
=
"Summarize our conversation so far in
{word_count}
words."
human_message_template
=
HumanMessagePromptTemplate
.
from_template
(
human_prompt
)
chat_prompt
=
ChatPromptTemplate
.
from_messages
([
MessagesPlaceholder
(
variable_name
=
"conversation"
),
human_message_template
])
human_message
=
HumanMessage
(
content
=
"What is the best way to learn programming?"
)
ai_message
=
AIMessage
(
content
=
"""
\
1. Choose a programming language: Decide on a programming language that you want to learn.
2. Start with the basics: Familiarize yourself with the basic programming concepts such as variables, data types and control structures.
3. Practice, practice, practice: The best way to learn programming is through hands-on experience
\
"""
)
chat_prompt
.
format_prompt
(
conversation
=
[
human_message
,
ai_message
],
word_count
=
"10"
)
.
to_messages
()
[HumanMessage(content='What is the best way to learn programming?', additional_kwargs={}),
 AIMessage(content='1. Choose a programming language: Decide on a programming language that you want to learn. \n\n2. Start with the basics: Familiarize yourself with the basic programming concepts such as variables, data types and control structures.\n\n3. Practice, practice, practice: The best way to learn programming is through hands-on experience', additional_kwargs={}),
 HumanMessage(content='Summarize our conversation so far in 10 words.', additional_kwargs={})]
previous
Output Parsers
next
Example Selectors
Contents
Format output
Different types of
MessagePromptTemplate
By Harrison Chase
© Copyright 2023, Harrison Chase.
Last updated on Jun 09, 2023.
.ipynb
.pdf
Callbacks
Contents
Callbacks
How to use callbacks
When do you want to use each of these?
Using an existing handler
Creating a custom handler
Async Callbacks
Using multiple handlers, passing in handlers
Tracing and Token Counting
Tracing
Token Counting
Callbacks
#
LangChain provides a callbacks system that allows you to hook into the various stages of your LLM application. This is useful for logging,
monitoring
,
streaming
, and other tasks.
You can subscribe to these events by using the
callbacks
argument available throughout the API. This argument is list of handler objects, which are expected to implement one or more of the methods described below in more detail. There are two main callbacks mechanisms:
Constructor callbacks
will be used for all calls made on that object, and will be scoped to that object only, i.e. if you pass a handler to the
LLMChain
constructor, it will not be used by the model attached to that chain.
Request callbacks
will be used for that specific request only, and all sub-requests that it contains (eg. a call to an
LLMChain
triggers a call to a Model, which uses the same handler passed through). These are explicitly passed through.
Advanced:
When you create a custom chain you can easily set it up to use the same callback system as all the built-in chains.
_call
,
_generate
,
_run
, and equivalent async methods on Chains / LLMs / Chat Models / Agents / Tools now receive a 2nd argument called
run_manager
which is bound to that run, and contains the logging methods that can be used by that object (i.e.
on_llm_new_token
). This is useful when constructing a custom chain. See this guide for more information on how to
create custom chains and use callbacks inside them.
CallbackHandlers
are objects that implement the
CallbackHandler
interface, which has a method for each event that can be subscribed to. The
CallbackManager
will call the appropriate method on each handler when the event is triggered.
class
BaseCallbackHandler
:
"""Base callback handler that can be used to handle callbacks from langchain."""
def
on_llm_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
prompts
:
List
[
str
],
**
kwargs
:
Any
)
->
Any
:
"""Run when LLM starts running."""
def
on_llm_new_token
(
self
,
token
:
str
,
**
kwargs
:
Any
)
->
Any
:
"""Run on new LLM token. Only available when streaming is enabled."""
def
on_llm_end
(
self
,
response
:
LLMResult
,
**
kwargs
:
Any
)
->
Any
:
"""Run when LLM ends running."""
def
on_llm_error
(
self
,
error
:
Union
[
Exception
,
KeyboardInterrupt
],
**
kwargs
:
Any
)
->
Any
:
"""Run when LLM errors."""
def
on_chain_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
inputs
:
Dict
[
str
,
Any
],
**
kwargs
:
Any
)
->
Any
:
"""Run when chain starts running."""
def
on_chain_end
(
self
,
outputs
:
Dict
[
str
,
Any
],
**
kwargs
:
Any
)
->
Any
:
"""Run when chain ends running."""
def
on_chain_error
(
self
,
error
:
Union
[
Exception
,
KeyboardInterrupt
],
**
kwargs
:
Any
)
->
Any
:
"""Run when chain errors."""
def
on_tool_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
input_str
:
str
,
**
kwargs
:
Any
)
->
Any
:
"""Run when tool starts running."""
def
on_tool_end
(
self
,
output
:
str
,
**
kwargs
:
Any
)
->
Any
:
"""Run when tool ends running."""
def
on_tool_error
(
self
,
error
:
Union
[
Exception
,
KeyboardInterrupt
],
**
kwargs
:
Any
)
->
Any
:
"""Run when tool errors."""
def
on_text
(
self
,
text
:
str
,
**
kwargs
:
Any
)
->
Any
:
"""Run on arbitrary text."""
def
on_agent_action
(
self
,
action
:
AgentAction
,
**
kwargs
:
Any
)
->
Any
:
"""Run on agent action."""
def
on_agent_finish
(
self
,
finish
:
AgentFinish
,
**
kwargs
:
Any
)
->
Any
:
"""Run on agent end."""
How to use callbacks
#
The
callbacks
argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) in two different places:
Constructor callbacks
: defined in the constructor, eg.
LLMChain(callbacks=[handler])
, which will be used for all calls made on that object, and will be scoped to that object only, eg. if you pass a handler to the
LLMChain
constructor, it will not be used by the Model attached to that chain.
Request callbacks
: defined in the
call()
/
run()
/
apply()
methods used for issuing a request, eg.
chain.call(inputs,
callbacks=[handler])
, which will be used for that specific request only, and all sub-requests that it contains (eg. a call to an LLMChain triggers a call to a Model, which uses the same handler passed in the
call()
method).
The
verbose
argument is available on most objects throughout the API (Chains, Models, Tools, Agents, etc.) as a constructor argument, eg.
LLMChain(verbose=True)
, and it is equivalent to passing a
ConsoleCallbackHandler
to the
callbacks
argument of that object and all child objects. This is useful for debugging, as it will log all events to the console.
When do you want to use each of these?
#
Constructor callbacks are most useful for use cases such as logging, monitoring, etc., which are
not specific to a single request
, but rather to the entire chain. For example, if you want to log all the requests made to an LLMChain, you would pass a handler to the constructor.
Request callbacks are most useful for use cases such as streaming, where you want to stream the output of a single request to a specific websocket connection, or other similar use cases. For example, if you want to stream the output of a single request to a websocket, you would pass a handler to the
call()
method
Using an existing handler
#
LangChain provides a few built-in handlers that you can use to get started. These are available in the
langchain/callbacks
module. The most basic handler is the
StdOutCallbackHandler
, which simply logs all events to
stdout
. In the future we will add more default handlers to the library.
Note
when the
verbose
flag on the object is set to true, the
StdOutCallbackHandler
will be invoked even without being explicitly passed in.
from
langchain.callbacks
import
StdOutCallbackHandler
from
langchain.chains
import
LLMChain
from
langchain.llms
import
OpenAI
from
langchain.prompts
import
PromptTemplate
handler
=
StdOutCallbackHandler
()
llm
=
OpenAI
()
prompt
=
PromptTemplate
.
from_template
(
"1 +
{number}
= "
)
# First, let's explicitly set the StdOutCallbackHandler in `callbacks`
chain
=
LLMChain
(
llm
=
llm
,
prompt
=
prompt
,
callbacks
=
[
handler
])
chain
.
run
(
number
=
2
)
# Then, let's use the `verbose` flag to achieve the same result
chain
=
LLMChain
(
llm
=
llm
,
prompt
=
prompt
,
verbose
=
True
)
chain
.
run
(
number
=
2
)
# Finally, let's use the request `callbacks` to achieve the same result
chain
=
LLMChain
(
llm
=
llm
,
prompt
=
prompt
)
chain
.
run
(
number
=
2
,
callbacks
=
[
handler
])
> Entering new LLMChain chain...
Prompt after formatting:
1 + 2 =
> Finished chain.
> Entering new LLMChain chain...
Prompt after formatting:
1 + 2 =
> Finished chain.
> Entering new LLMChain chain...
Prompt after formatting:
1 + 2 =
> Finished chain.
'\n\n3'
Creating a custom handler
#
You can create a custom handler to set on the object as well. In the example below, weâ€™ll implement streaming with a custom handler.
from
langchain.callbacks.base
import
BaseCallbackHandler
from
langchain.chat_models
import
ChatOpenAI
from
langchain.schema
import
HumanMessage
class
MyCustomHandler
(
BaseCallbackHandler
):
def
on_llm_new_token
(
self
,
token
:
str
,
**
kwargs
)
->
None
:
print
(
f
"My custom handler, token:
{
token
}
"
)
# To enable streaming, we pass in `streaming=True` to the ChatModel constructor
# Additionally, we pass in a list with our custom handler
chat
=
ChatOpenAI
(
max_tokens
=
25
,
streaming
=
True
,
callbacks
=
[
MyCustomHandler
()])
chat
([
HumanMessage
(
content
=
"Tell me a joke"
)])
My custom handler, token: 
My custom handler, token: Why
My custom handler, token:  did
My custom handler, token:  the
My custom handler, token:  tomato
My custom handler, token:  turn
My custom handler, token:  red
My custom handler, token: ?
My custom handler, token:  Because
My custom handler, token:  it
My custom handler, token:  saw
My custom handler, token:  the
My custom handler, token:  salad
My custom handler, token:  dressing
My custom handler, token: !
My custom handler, token:
AIMessage(content='Why did the tomato turn red? Because it saw the salad dressing!', additional_kwargs={})
Async Callbacks
#
If you are planning to use the async API, it is recommended to use
AsyncCallbackHandler
to avoid blocking the runloop.
Advanced
if you use a sync
CallbackHandler
while using an async method to run your llm/chain/tool/agent, it will still work. However, under the hood, it will be called with
run_in_executor
which can cause issues if your
CallbackHandler
is not thread-safe.
import
asyncio
from
typing
import
Any
,
Dict
,
List
from
langchain.schema
import
LLMResult
from
langchain.callbacks.base
import
AsyncCallbackHandler
class
MyCustomSyncHandler
(
BaseCallbackHandler
):
def
on_llm_new_token
(
self
,
token
:
str
,
**
kwargs
)
->
None
:
print
(
f
"Sync handler being called in a `thread_pool_executor`: token:
{
token
}
"
)
class
MyCustomAsyncHandler
(
AsyncCallbackHandler
):
"""Async callback handler that can be used to handle callbacks from langchain."""
async
def
on_llm_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
prompts
:
List
[
str
],
**
kwargs
:
Any
)
->
None
:
"""Run when chain starts running."""
print
(
"zzzz...."
)
await
asyncio
.
sleep
(
0.3
)
class_name
=
serialized
[
"name"
]
print
(
"Hi! I just woke up. Your llm is starting"
)
async
def
on_llm_end
(
self
,
response
:
LLMResult
,
**
kwargs
:
Any
)
->
None
:
"""Run when chain ends running."""
print
(
"zzzz...."
)
await
asyncio
.
sleep
(
0.3
)
print
(
"Hi! I just woke up. Your llm is ending"
)
# To enable streaming, we pass in `streaming=True` to the ChatModel constructor
# Additionally, we pass in a list with our custom handler
chat
=
ChatOpenAI
(
max_tokens
=
25
,
streaming
=
True
,
callbacks
=
[
MyCustomSyncHandler
(),
MyCustomAsyncHandler
()])
await
chat
.
agenerate
([[
HumanMessage
(
content
=
"Tell me a joke"
)]])
zzzz....
Hi! I just woke up. Your llm is starting
Sync handler being called in a `thread_pool_executor`: token: 
Sync handler being called in a `thread_pool_executor`: token: Why
Sync handler being called in a `thread_pool_executor`: token:  don
Sync handler being called in a `thread_pool_executor`: token: 't
Sync handler being called in a `thread_pool_executor`: token:  scientists
Sync handler being called in a `thread_pool_executor`: token:  trust
Sync handler being called in a `thread_pool_executor`: token:  atoms
Sync handler being called in a `thread_pool_executor`: token: ?


Sync handler being called in a `thread_pool_executor`: token: Because
Sync handler being called in a `thread_pool_executor`: token:  they
Sync handler being called in a `thread_pool_executor`: token:  make
Sync handler being called in a `thread_pool_executor`: token:  up
Sync handler being called in a `thread_pool_executor`: token:  everything
Sync handler being called in a `thread_pool_executor`: token: !
Sync handler being called in a `thread_pool_executor`: token: 
zzzz....
Hi! I just woke up. Your llm is ending
LLMResult(generations=[[ChatGeneration(text="Why don't scientists trust atoms?\n\nBecause they make up everything!", generation_info=None, message=AIMessage(content="Why don't scientists trust atoms?\n\nBecause they make up everything!", additional_kwargs={}))]], llm_output={'token_usage': {}, 'model_name': 'gpt-3.5-turbo'})
Using multiple handlers, passing in handlers
#
In the previous examples, we passed in callback handlers upon creation of an object by using
callbacks=
. In this case, the callbacks will be scoped to that particular object.
However, in many cases, it is advantageous to pass in handlers instead when running the object. When we pass through
CallbackHandlers
using the
callbacks
keyword arg when executing an run, those callbacks will be issued by all nested objects involved in the execution. For example, when a handler is passed through to an
Agent
, it will be used for all callbacks related to the agent and all the objects involved in the agentâ€™s execution, in this case, the
Tools
,
LLMChain
, and
LLM
.
This prevents us from having to manually attach the handlers to each individual nested object.
from
typing
import
Dict
,
Union
,
Any
,
List
from
langchain.callbacks.base
import
BaseCallbackHandler
from
langchain.schema
import
AgentAction
from
langchain.agents
import
AgentType
,
initialize_agent
,
load_tools
from
langchain.callbacks
import
tracing_enabled
from
langchain.llms
import
OpenAI
# First, define custom callback handler implementations
class
MyCustomHandlerOne
(
BaseCallbackHandler
):
def
on_llm_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
prompts
:
List
[
str
],
**
kwargs
:
Any
)
->
Any
:
print
(
f
"on_llm_start
{
serialized
[
'name'
]
}
"
)
def
on_llm_new_token
(
self
,
token
:
str
,
**
kwargs
:
Any
)
->
Any
:
print
(
f
"on_new_token
{
token
}
"
)
def
on_llm_error
(
self
,
error
:
Union
[
Exception
,
KeyboardInterrupt
],
**
kwargs
:
Any
)
->
Any
:
"""Run when LLM errors."""
def
on_chain_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
inputs
:
Dict
[
str
,
Any
],
**
kwargs
:
Any
)
->
Any
:
print
(
f
"on_chain_start
{
serialized
[
'name'
]
}
"
)
def
on_tool_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
input_str
:
str
,
**
kwargs
:
Any
)
->
Any
:
print
(
f
"on_tool_start
{
serialized
[
'name'
]
}
"
)
def
on_agent_action
(
self
,
action
:
AgentAction
,
**
kwargs
:
Any
)
->
Any
:
print
(
f
"on_agent_action
{
action
}
"
)
class
MyCustomHandlerTwo
(
BaseCallbackHandler
):
def
on_llm_start
(
self
,
serialized
:
Dict
[
str
,
Any
],
prompts
:
List
[
str
],
**
kwargs
:
Any
)
->
Any
:
print
(
f
"on_llm_start (I'm the second handler!!)
{
serialized
[
'name'
]
}
"
)
# Instantiate the handlers
handler1
=
MyCustomHandlerOne
()
handler2
=
MyCustomHandlerTwo
()
# Setup the agent. Only the `llm` will issue callbacks for handler2
llm
=
OpenAI
(
temperature
=
0
,
streaming
=
True
,
callbacks
=
[
handler2
])
tools
=
load_tools
([
"llm-math"
],
llm
=
llm
)
agent
=
initialize_agent
(
tools
,
llm
,
agent
=
AgentType
.
ZERO_SHOT_REACT_DESCRIPTION
)
# Callbacks for handler1 will be issued by every object involved in the
# Agent execution (llm, llmchain, tool, agent executor)
agent
.
run
(
"What is 2 raised to the 0.235 power?"
,
callbacks
=
[
handler1
])
on_chain_start AgentExecutor
on_chain_start LLMChain
on_llm_start OpenAI
on_llm_start (I'm the second handler!!) OpenAI
on_new_token  I
on_new_token  need
on_new_token  to
on_new_token  use
on_new_token  a
on_new_token  calculator
on_new_token  to
on_new_token  solve
on_new_token  this
on_new_token .
on_new_token 
Action
on_new_token :
on_new_token  Calculator
on_new_token 
Action
on_new_token  Input
on_new_token :
on_new_token  2
on_new_token ^
on_new_token 0
on_new_token .
on_new_token 235
on_new_token 
on_agent_action AgentAction(tool='Calculator', tool_input='2^0.235', log=' I need to use a calculator to solve this.\nAction: Calculator\nAction Input: 2^0.235')
on_tool_start Calculator
on_chain_start LLMMathChain
on_chain_start LLMChain
on_llm_start OpenAI
on_llm_start (I'm the second handler!!) OpenAI
on_new_token 

on_new_token ```text
on_new_token 

on_new_token 2
on_new_token **
on_new_token 0
on_new_token .
on_new_token 235
on_new_token 

on_new_token ```

on_new_token ...
on_new_token num
on_new_token expr
on_new_token .
on_new_token evaluate
on_new_token ("
on_new_token 2
on_new_token **
on_new_token 0
on_new_token .
on_new_token 235
on_new_token ")
on_new_token ...
on_new_token 

on_new_token 
on_chain_start LLMChain
on_llm_start OpenAI
on_llm_start (I'm the second handler!!) OpenAI
on_new_token  I
on_new_token  now
on_new_token  know
on_new_token  the
on_new_token  final
on_new_token  answer
on_new_token .
on_new_token 
Final
on_new_token  Answer
on_new_token :
on_new_token  1
on_new_token .
on_new_token 17
on_new_token 690
on_new_token 67
on_new_token 372
on_new_token 187
on_new_token 674
on_new_token
'1.1769067372187674'
Tracing and Token Counting
#
Tracing and token counting are two capabilities we provide which are built on our callbacks mechanism.
Tracing
#
There are two recommended ways to trace your LangChains:
Setting the
LANGCHAIN_TRACING
environment variable to
"true"
.
Using a context manager
with
tracing_enabled()
to trace a particular block of code.
Note
if the environment variable is set, all code will be traced, regardless of whether or not itâ€™s within the context manager.
import
os
from
langchain.agents
import
AgentType
,
initialize_agent
,
load_tools
from
langchain.callbacks
import
tracing_enabled
from
langchain.llms
import
OpenAI
# To run the code, make sure to set OPENAI_API_KEY and SERPAPI_API_KEY
llm
=
OpenAI
(
temperature
=
0
)
tools
=
load_tools
([
"llm-math"
,
"serpapi"
],
llm
=
llm
)
agent
=
initialize_agent
(
tools
,
llm
,
agent
=
AgentType
.
ZERO_SHOT_REACT_DESCRIPTION
,
verbose
=
True
)
questions
=
[
"Who won the US Open men's final in 2019? What is his age raised to the 0.334 power?"
,
"Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?"
,
"Who won the most recent formula 1 grand prix? What is their age raised to the 0.23 power?"
,
"Who won the US Open women's final in 2019? What is her age raised to the 0.34 power?"
,
"Who is Beyonce's husband? What is his age raised to the 0.19 power?"
,
]
os
.
environ
[
"LANGCHAIN_TRACING"
]
=
"true"
# Both of the agent runs will be traced because the environment variable is set
agent
.
run
(
questions
[
0
])
with
tracing_enabled
()
as
session
:
assert
session
agent
.
run
(
questions
[
1
])
> Entering new AgentExecutor chain...
I need to find out who won the US Open men's final in 2019 and then calculate his age raised to the 0.334 power.
Action: Search
Action Input: "US Open men's final 2019 winner"
Observation:
Rafael Nadal defeated Daniil Medvedev in the final, 7â€“5, 6â€“3, 5â€“7, 4â€“6, 6â€“4 to win the men's singles tennis title at the 2019 US Open. It was his fourth US ...
Thought:
I need to find out the age of the winner
Action: Search
Action Input: "Rafael Nadal age"
Observation:
36 years
Thought:
I need to calculate the age raised to the 0.334 power
Action: Calculator
Action Input: 36^0.334
Observation:
Answer: 3.3098250249682484
Thought:
I now know the final answer
Final Answer: Rafael Nadal, aged 36, won the US Open men's final in 2019 and his age raised to the 0.334 power is 3.3098250249682484.
> Finished chain.
> Entering new AgentExecutor chain...
I need to find out who Olivia Wilde's boyfriend is and then calculate his age raised to the 0.23 power.
Action: Search
Action Input: "Olivia Wilde boyfriend"
Observation:
Sudeikis and Wilde's relationship ended in November 2020. Wilde was publicly served with court documents regarding child custody while she was presenting Don't Worry Darling at CinemaCon 2022. In January 2021, Wilde began dating singer Harry Styles after meeting during the filming of Don't Worry Darling.
Thought:
I need to find out Harry Styles' age.
Action: Search
Action Input: "Harry Styles age"
Observation:
29 years
Thought:
I need to calculate 29 raised to the 0.23 power.
Action: Calculator
Action Input: 29^0.23
Observation:
Answer: 2.169459462491557
Thought:
I now know the final answer.
Final Answer: Harry Styles is Olivia Wilde's boyfriend and his current age raised to the 0.23 power is 2.169459462491557.
> Finished chain.
# Now, we unset the environment variable and use a context manager.
if
"LANGCHAIN_TRACING"
in
os
.
environ
:
del
os
.
environ
[
"LANGCHAIN_TRACING"
]
# here, we are writing traces to "my_test_session"
with
tracing_enabled
(
"my_test_session"
)
as
session
:
assert
session
agent
.
run
(
questions
[
0
])
# this should be traced
agent
.
run
(
questions
[
1
])
# this should not be traced
> Entering new AgentExecutor chain...
I need to find out who won the US Open men's final in 2019 and then calculate his age raised to the 0.334 power.
Action: Search
Action Input: "US Open men's final 2019 winner"
Observation:
Rafael Nadal defeated Daniil Medvedev in the final, 7â€“5, 6â€“3, 5â€“7, 4â€“6, 6â€“4 to win the men's singles tennis title at the 2019 US Open. It was his fourth US ...
Thought:
I need to find out the age of the winner
Action: Search
Action Input: "Rafael Nadal age"
Observation:
36 years
Thought:
I need to calculate the age raised to the 0.334 power
Action: Calculator
Action Input: 36^0.334
Observation:
Answer: 3.3098250249682484
Thought:
I now know the final answer
Final Answer: Rafael Nadal, aged 36, won the US Open men's final in 2019 and his age raised to the 0.334 power is 3.3098250249682484.
> Finished chain.
> Entering new AgentExecutor chain...
I need to find out who Olivia Wilde's boyfriend is and then calculate his age raised to the 0.23 power.
Action: Search
Action Input: "Olivia Wilde boyfriend"
Observation:
Sudeikis and Wilde's relationship ended in November 2020. Wilde was publicly served with court documents regarding child custody while she was presenting Don't Worry Darling at CinemaCon 2022. In January 2021, Wilde began dating singer Harry Styles after meeting during the filming of Don't Worry Darling.
Thought:
I need to find out Harry Styles' age.
Action: Search
Action Input: "Harry Styles age"
Observation:
29 years
Thought:
I need to calculate 29 raised to the 0.23 power.
Action: Calculator
Action Input: 29^0.23
Observation:
Answer: 2.169459462491557
Thought:
I now know the final answer.
Final Answer: Harry Styles is Olivia Wilde's boyfriend and his current age raised to the 0.23 power is 2.169459462491557.
> Finished chain.
"Harry Styles is Olivia Wilde's boyfriend and his current age raised to the 0.23 power is 2.169459462491557."
# The context manager is concurrency safe:
if
"LANGCHAIN_TRACING"
in
os
.
environ
:
del
os
.
environ
[
"LANGCHAIN_TRACING"
]
# start a background task
task
=
asyncio
.
create_task
(
agent
.
arun
(
questions
[
0
]))
# this should not be traced
with
tracing_enabled
()
as
session
:
assert
session
tasks
=
[
agent
.
arun
(
q
)
for
q
in
questions
[
1
:
3
]]
# these should be traced
await
asyncio
.
gather
(
*
tasks
)
await
task
> Entering new AgentExecutor chain...
> Entering new AgentExecutor chain...
> Entering new AgentExecutor chain...
I need to find out who won the grand prix and then calculate their age raised to the 0.23 power.
Action: Search
Action Input: "Formula 1 Grand Prix Winner" I need to find out who won the US Open men's final in 2019 and then calculate his age raised to the 0.334 power.
Action: Search
Action Input: "US Open men's final 2019 winner"
Rafael Nadal defeated Daniil Medvedev in the final, 7â€“5, 6â€“3, 5â€“7, 4â€“6, 6â€“4 to win the men's singles tennis title at the 2019 US Open. It was his fourth US ...
I need to find out who Olivia Wilde's boyfriend is and then calculate his age raised to the 0.23 power.
Action: Search
Action Input: "Olivia Wilde boyfriend"
Sudeikis and Wilde's relationship ended in November 2020. Wilde was publicly served with court documents regarding child custody while she was presenting Don't Worry Darling at CinemaCon 2022. In January 2021, Wilde began dating singer Harry Styles after meeting during the filming of Don't Worry Darling.Lewis Hamilton has won 103 Grands Prix during his career. He won 21 races with McLaren and has won 82 with Mercedes. Lewis Hamilton holds the record for the ...
I need to find out the age of the winner
Action: Search
Action Input: "Rafael Nadal age"
36 years
I need to find out Harry Styles' age.
Action: Search
Action Input: "Harry Styles age" I need to find out Lewis Hamilton's age
Action: Search
Action Input: "Lewis Hamilton Age"
29 years
I need to calculate the age raised to the 0.334 power
Action: Calculator
Action Input: 36^0.334 I need to calculate 29 raised to the 0.23 power.
Action: Calculator
Action Input: 29^0.23
Answer: 3.3098250249682484Answer: 2.169459462491557
38 years
> Finished chain.
> Finished chain.
I now need to calculate 38 raised to the 0.23 power
Action: Calculator
Action Input: 38^0.23
Answer: 2.3086081644669734
> Finished chain.
"Rafael Nadal, aged 36, won the US Open men's final in 2019 and his age raised to the 0.334 power is 3.3098250249682484."
Token Counting
#
LangChain offers a context manager that allows you to count tokens.
from
langchain.callbacks
import
get_openai_callback
llm
=
OpenAI
(
temperature
=
0
)
with
get_openai_callback
()
as
cb
:
llm
(
"What is the square root of 4?"
)
total_tokens
=
cb
.
total_tokens
assert
total_tokens
>
0
with
get_openai_callback
()
as
cb
:
llm
(
"What is the square root of 4?"
)
llm
(
"What is the square root of 4?"
)
assert
cb
.
total_tokens
==
total_tokens
*
2
# You can kick off concurrent runs from within the context manager
with
get_openai_callback
()
as
cb
:
await
asyncio
.
gather
(
*
[
llm
.
agenerate
([
"What is the square root of 4?"
])
for
_
in
range
(
3
)]
)
assert
cb
.
total_tokens
==
total_tokens
*
3
# The context manager is concurrency safe
task
=
asyncio
.
create_task
(
llm
.
agenerate
([
"What is the square root of 4?"
]))
with
get_openai_callback
()
as
cb
:
await
llm
.
agenerate
([
"What is the square root of 4?"
])
await
task
assert
cb
.
total_tokens
==
total_tokens
previous
Plan and Execute
next
Autonomous Agents
Contents
Callbacks
How to use callbacks
When do you want to use each of these?
Using an existing handler
Creating a custom handler
Async Callbacks
Using multiple handlers, passing in handlers
Tracing and Token Counting
Tracing
Token Counting
By Harrison Chase
Â© Copyright 2023, Harrison Chase.
Last updated on Jun 09, 2023.